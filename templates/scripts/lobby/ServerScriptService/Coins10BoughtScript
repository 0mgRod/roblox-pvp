local MarketplaceService = game:GetService("MarketplaceService")
local DataStoreService = game:GetService("DataStoreService")

local currencyName = "Coins"

local PreviousPurchases = DataStoreService:GetDataStore("PreviousPurchases")

local ONE_HUNDRED_CASH = 1164934424

MarketplaceService.ProcessReceipt = function(receipt)

	-- Receipt has PurchaseId, PlayerId, ProductId, CurrencySpentValue, CurrencyType, PlaceIdWherePurchased

	local ID = receipt.PlayerId.."-"..receipt.PurchaseId

	local success = nil

	pcall(function()
		success = PreviousPurchases:GetAsync(ID)
	end)

	if success then -- Has it already been bought ?
		-- Purchase has already been done
		return Enum.ProductPurchaseDecision.PurchaseGranted
	end

	local player = game.Players:GetPlayerByUserId(receipt.PlayerId)

	if not player then
		-- Left, disconnected
		return Enum.ProductPurchaseDecision.NotProcessedYet -- We're going to give their rewards next time they join / next time fired
	else

		if receipt.ProductId == ONE_HUNDRED_CASH then
			-- They've bought 100 cash
			player.leaderstats[currencyName].Value = player.leaderstats[currencyName].Value + 10
		end

		pcall(function()
			PreviousPurchases:SetAsync(ID,true)
		end)
		return Enum.ProductPurchaseDecision.PurchaseGranted

	end
end
